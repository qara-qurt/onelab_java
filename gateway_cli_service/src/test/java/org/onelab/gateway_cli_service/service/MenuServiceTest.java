package org.onelab.gateway_cli_service.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.onelab.common_lib.dto.DishDto;
import org.onelab.common_lib.dto.MenuDto;
import org.onelab.common_lib.dto.MenuRequestDto;
import org.onelab.gateway_cli_service.client.RestaurantClient;
import org.onelab.gateway_cli_service.utils.Utils;

import java.util.List;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class MenuServiceTest {

    private RestaurantClient restaurantClient;
    private MenuServiceImpl menuService;

    @BeforeEach
    void setUp() {
        restaurantClient = mock(RestaurantClient.class);
        menuService = new MenuServiceImpl(restaurantClient);
    }

    @Test
    void testGetMenu_whenFound_returnsFormattedMenu() {
        MenuDto menu = MenuDto.builder()
                .id(1L)
                .name("Lunch Menu")
                .dishes(List.of(
                        DishDto.builder().id(1L).name("Pizza").description("Cheese").price(9.99).build()
                ))
                .build();

        when(restaurantClient.getMenu(1L)).thenReturn(menu);

        String result = menuService.getMenu(1L);
        String expected = Utils.formatMenu(menu);

        assertEquals(expected, result);
    }

    @Test
    void testGetMenu_whenNotFound_returnsErrorMessage() {
        when(restaurantClient.getMenu(999L)).thenThrow(new RuntimeException("Not found"));

        String result = menuService.getMenu(999L);

        assertEquals("‚ùå –ú–µ–Ω—é —Å ID '999' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", result);
    }

    @Test
    void testCreateMenu_whenValid_returnsSuccessMessage() {
        String menuName = "Special Menu";
        List<Long> dishIds = List.of(1L, 2L);

        when(restaurantClient.addMenu(any(MenuRequestDto.class))).thenReturn("42");

        String result = menuService.createMenu(menuName, dishIds);

        assertEquals("‚úÖ –ú–µ–Ω—é 'Special Menu' —Å–æ–∑–¥–∞–Ω–æ. ID: 42", result);
    }

    @Test
    void testCreateMenu_whenInvalid_returnsValidationMessage() {
        String result = menuService.createMenu("", Collections.emptyList());

        assertEquals("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–Ω—é!\n‚ùå –ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ.\n", result);
    }

    @Test
    void testCreateMenu_whenExceptionThrown_returnsErrorMessage() {
        String name = "Dinner";
        List<Long> ids = List.of(1L);

        when(restaurantClient.addMenu(any(MenuRequestDto.class)))
                .thenThrow(new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è"));

        String result = menuService.createMenu(name, ids);

        assertEquals("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è", result);
    }

    @Test
    void testRemoveMenu_whenSuccess_returnsSuccessMessage() {
        String result = menuService.removeMenu(10L);

        verify(restaurantClient).removeMenu(10L);
        assertEquals("üóëÔ∏è –ú–µ–Ω—é —Å ID '10' —É–¥–∞–ª–µ–Ω–æ.", result);
    }

    @Test
    void testRemoveMenu_whenException_returnsErrorMessage() {
        doThrow(new RuntimeException("Not found")).when(restaurantClient).removeMenu(20L);

        String result = menuService.removeMenu(20L);

        assertEquals("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–Ω—é: Not found", result);
    }

    @Test
    void testGetMenus_whenNotEmpty_returnsFormattedList() {
        MenuDto menu = MenuDto.builder()
                .id(1L)
                .name("Menu 1")
                .dishes(List.of(
                        DishDto.builder().id(1L).name("Soup").description("Hot").price(3.0).build()
                ))
                .build();

        when(restaurantClient.getMenus(1, 10)).thenReturn(List.of(menu));

        String result = menuService.getMenus(1, 10);

        assertEquals(Utils.formatMenu(menu), result);
    }

    @Test
    void testGetMenus_whenEmpty_returnsEmptyMessage() {
        when(restaurantClient.getMenus(1, 10)).thenReturn(Collections.emptyList());

        String result = menuService.getMenus(1, 10);

        assertEquals("üì≠ –ú–µ–Ω—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", result);
    }

    @Test
    void testAddDishToMenu_whenSuccess_returnsSuccessMessage() {
        String result = menuService.addDishToMenu(1L, List.of(1L, 2L));

        verify(restaurantClient).addDishesToMenu(1L, List.of(1L, 2L));
        assertEquals("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –±–ª—é–¥–∞ –≤ –º–µ–Ω—é: 1", result);
    }

    @Test
    void testAddDishToMenu_whenException_returnsErrorMessage() {
        doThrow(new RuntimeException("–û—à–∏–±–∫–∞")).when(restaurantClient).addDishesToMenu(any(), any());

        String result = menuService.addDishToMenu(1L, List.of(1L));

        assertEquals("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥ –≤ –º–µ–Ω—é: –û—à–∏–±–∫–∞", result);
    }

    @Test
    void testRemoveDishFromMenu_whenSuccess_returnsSuccessMessage() {
        String result = menuService.removeDishFromMenu(2L, List.of(3L));

        verify(restaurantClient).removeDishesFromMenu(2L, List.of(3L));
        assertEquals("üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é: 2", result);
    }

    @Test
    void testRemoveDishFromMenu_whenException_returnsErrorMessage() {
        doThrow(new RuntimeException("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")).when(restaurantClient).removeDishesFromMenu(any(), any());

        String result = menuService.removeDishFromMenu(2L, List.of(5L));

        assertEquals("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–ª—é–¥ –∏–∑ –º–µ–Ω—é: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", result);
    }
}

package org.onelab.gateway_cli_service.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.onelab.common_lib.dto.UserDto;
import org.onelab.common_lib.dto.UserLoginDto;
import org.onelab.common_lib.enums.Role;
import org.onelab.gateway_cli_service.client.TokenStorage;
import org.onelab.gateway_cli_service.client.UserClient;
import org.onelab.gateway_cli_service.kafka.KafkaProducer;
import org.onelab.gateway_cli_service.utils.Utils;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class UserServiceTest {

    private UserClient userClient;
    private TokenStorage tokenStorage;
    private KafkaProducer kafkaProducer;
    private UserServiceImpl userService;

    @BeforeEach
    void setUp() {
        userClient = mock(UserClient.class);
        tokenStorage = mock(TokenStorage.class);
        kafkaProducer = mock(KafkaProducer.class);
        userService = new UserServiceImpl(userClient, tokenStorage, kafkaProducer);
    }

    @Test
    void testLogin_whenSuccess_returnsTokenMessage() {
        UserLoginDto expectedLogin = UserLoginDto.builder()
                .username("user")
                .password("pass")
                .build();

        when(userClient.loginUser(any())).thenReturn(Map.of("token", "jwt.token"));

        String result = userService.login("user", "pass");

        assertEquals("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", result);
        verify(tokenStorage).setToken("jwt.token");
    }

    @Test
    void testLogin_whenNoToken_returnsError() {
        when(userClient.loginUser(any())).thenReturn(Map.of());

        String result = userService.login("user", "pass");

        assertEquals("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", result);
    }

    @Test
    void testLogin_whenExceptionThrown_returnsErrorMessage() {
        when(userClient.loginUser(any())).thenThrow(new RuntimeException("–û—à–∏–±–∫–∞"));

        String result = userService.login("user", "pass");

        assertEquals("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –û—à–∏–±–∫–∞", result);
    }

    @Test
    void testGetUserById_returnsFormattedUser() {
        UserDto user = UserDto.builder()
                .id(1L)
                .name("Test")
                .surname("User")
                .username("tester")
                .phone("+77001112233")
                .balance(100.0)
                .isActive(true)
                .build();

        when(userClient.getUserById(1L)).thenReturn(user);

        String result = userService.getUserByID(1L);

        assertEquals(Utils.formatUser(user), result);
    }

    @Test
    void testCreateUser_whenValid_returnsSuccessMessage() {
        UserDto created = UserDto.builder()
                .id(10L)
                .username("testuser")
                .build();

        when(userClient.registerUser(any())).thenReturn(created);

        String result = userService.createUser("Name", "Surname", "testuser", "+77001112233", "password",
                List.of(Role.USER));

        assertEquals("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å testuser –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. ID: 10", result);
    }

    @Test
    void testCreateUser_whenInvalid_returnsValidationError() {
        String result = userService.createUser("", "", "", "invalid", "123", List.of());

        assertTrue(result.contains("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
        assertTrue(result.contains("‚ùå –§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"));
        assertTrue(result.contains("‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
        assertTrue(result.contains("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"));
        assertTrue(result.contains("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"));
    }

    @Test
    void testCreateUser_whenException_returnsErrorMessage() {
        when(userClient.registerUser(any())).thenThrow(new RuntimeException("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"));

        String result = userService.createUser("Name", "Surname", "user", "+77001112233", "password",
                List.of(Role.USER));

        assertEquals("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", result);
    }

    @Test
    void testSearchUsers_whenFound_returnsFormatted() {
        UserDto user = UserDto.builder()
                .id(1L)
                .name("Ivan")
                .surname("Ivanov")
                .username("ivan123")
                .phone("+77001112233")
                .balance(50.0)
                .isActive(true)
                .build();

        when(userClient.getAllUsers(1, 10)).thenReturn(List.of(user));

        String result = userService.searchUsers("ivan", 1, 10);

        assertEquals(Utils.formatUser(user), result);
    }

    @Test
    void testSearchUsers_whenNotFound_returnsErrorMessage() {
        when(userClient.getAllUsers(1, 10)).thenReturn(List.of());

        String result = userService.searchUsers("notfound", 1, 10);

        assertEquals("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º 'notfound' –Ω–µ –Ω–∞–π–¥–µ–Ω.", result);
    }

    @Test
    void testGetUsers_whenFound_returnsFormattedList() {
        UserDto user = UserDto.builder()
                .id(1L)
                .name("Anna")
                .surname("Smith")
                .username("anna_s")
                .phone("+77001112233")
                .balance(90.0)
                .isActive(true)
                .build();

        when(userClient.getAllUsers(0, 5)).thenReturn(List.of(user));

        String result = userService.getUsers(0, 5);

        assertEquals(Utils.formatUser(user), result);
    }

    @Test
    void testGetUsers_whenEmpty_returnsErrorMessage() {
        when(userClient.getAllUsers(0, 5)).thenReturn(Collections.emptyList());

        String result = userService.getUsers(0, 5);

        assertEquals("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", result);
    }

    @Test
    void testRemoveUser_whenSuccess_returnsSuccessMessage() {
        String result = userService.removeUser(10L);

        verify(userClient).deleteUser(10L);
        assertEquals("üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 10 —É–¥–∞–ª–µ–Ω.", result);
    }

    @Test
    void testRemoveUser_whenException_returnsErrorMessage() {
        doThrow(new RuntimeException("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")).when(userClient).deleteUser(15L);

        String result = userService.removeUser(15L);

        assertEquals("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ", result);
    }

    @Test
    void testFillBalance_returnsProcessingMessage_andSendsKafkaEvent() {
        String result = userService.fillBalance(5L, 100.0);

        verify(kafkaProducer).fillBalance(5L, 100.0);
        assertEquals("–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç–≤–∞–µ—Ç—Å—è", result);
    }
}

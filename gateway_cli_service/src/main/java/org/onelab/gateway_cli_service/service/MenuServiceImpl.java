package org.onelab.gateway_cli_service.service;

import lombok.RequiredArgsConstructor;
import org.onelab.gateway_cli_service.client.RestaurantClient;
import org.onelab.gateway_cli_service.dto.MenuDto;
import org.onelab.gateway_cli_service.dto.MenuRequestDto;
import org.onelab.gateway_cli_service.utils.Utils;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class MenuServiceImpl implements MenuService {

    private final RestaurantClient restaurantClient;

    @Override
    public String getMenu(Long id) {
        try {
            MenuDto menu = restaurantClient.getMenu(id);
            return Utils.formatMenu(menu);
        } catch (Exception e) {
            return "‚ùå –ú–µ–Ω—é —Å ID '" + id + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
        }
    }

    @Override
    public String createMenu(String name, List<Long> dishIDs) {
        String validationError = Utils.validateMenuInput(name, dishIDs);
        if (validationError != null) return validationError;

        MenuRequestDto menuRequest = new MenuRequestDto(name, dishIDs);
        try {
            String menuId = restaurantClient.addMenu(menuRequest);
            return "‚úÖ –ú–µ–Ω—é '" + name + "' —Å–æ–∑–¥–∞–Ω–æ. ID: " + menuId;
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é: " + e.getMessage();
        }
    }

    @Override
    public String removeMenu(Long id) {
        try {
            restaurantClient.removeMenu(id);
            return "üóëÔ∏è –ú–µ–Ω—é —Å ID '" + id + "' —É–¥–∞–ª–µ–Ω–æ.";
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–Ω—é: " + e.getMessage();
        }
    }

    @Override
    public String getMenus(int page, int size) {
        List<MenuDto> menus = restaurantClient.getMenus(page, size);
        if (menus.isEmpty()) {
            return "üì≠ –ú–µ–Ω—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.";
        }
        return menus.stream()
                .map(Utils::formatMenu)
                .collect(Collectors.joining("\n"));
    }

    @Override
    public String addDishToMenu(Long menuID, List<Long> dishIDs) {
        try {
            restaurantClient.addDishesToMenu(menuID, dishIDs);
            return "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –±–ª—é–¥–∞ –≤ –º–µ–Ω—é: " + menuID;
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥ –≤ –º–µ–Ω—é: " + e.getMessage();
        }
    }

    @Override
    public String removeDishFromMenu(Long menuID, List<Long> dishIDs) {
        try {
            restaurantClient.removeDishesFromMenu(menuID, dishIDs);
            return "üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é: " + menuID;
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–ª—é–¥ –∏–∑ –º–µ–Ω—é: " + e.getMessage();
        }
    }
}
